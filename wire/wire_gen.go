// Code generated by Wire. DO NOT EDIT.

//go:generate go run -mod=mod github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package wire

import (
	"trainee3/config"
	"trainee3/database"
	"trainee3/database/mongo"
	"trainee3/database/mysql"
	"trainee3/database/redis"
	"trainee3/handlers"
	"trainee3/repository"
	"trainee3/services"
)

// Injectors from wire.go:

func InitializeApplication() (*application, error) {
	iMysql := repository.NewMysql()
	iMongo := repository.NewMongo()
	iRedis := repository.NewRedis()
	repo := repository.NewRepo(iMysql, iMongo, iRedis)
	configConfig, err := config.New()
	if err != nil {
		return nil, err
	}
	iMysqlDB, err := mysql.New(configConfig)
	if err != nil {
		return nil, err
	}
	iMongoDB, err := mongo.New(configConfig)
	if err != nil {
		return nil, err
	}
	client, err := redis.New(configConfig)
	if err != nil {
		return nil, err
	}
	databaseDatabase := database.New(iMysqlDB, iMongoDB, client)
	iActivity := services.NewActivity(repo, databaseDatabase)
	iCache := services.NewCache(repo, databaseDatabase)
	servicesServices := services.New(iActivity, iCache)
	iSignIn := handlers.NewActivity(servicesServices)
	handlersICache := handlers.NewCache(servicesServices)
	handlersHandlers := handlers.New(iSignIn, handlersICache)
	wireApplication := NewApplication(servicesServices, handlersHandlers)
	return wireApplication, nil
}

// wire.go:

type application struct {
	Services *services.Services
	Handlers *handlers.Handlers
}

func NewApplication(services2 *services.Services, handlers2 *handlers.Handlers) *application {
	return &application{
		Services: services2,
		Handlers: handlers2,
	}
}
