// Code generated by mockery v2.43.2. DO NOT EDIT.

package mocks

import (
	mock "github.com/stretchr/testify/mock"
	mongo "go.mongodb.org/mongo-driver/mongo"
)

// IMongo is an autogenerated mock type for the IMongo type
type IMongo struct {
	mock.Mock
}

type IMongo_Expecter struct {
	mock *mock.Mock
}

func (_m *IMongo) EXPECT() *IMongo_Expecter {
	return &IMongo_Expecter{mock: &_m.Mock}
}

// FindOne provides a mock function with given fields: db, collectionStr, filter, model
func (_m *IMongo) FindOne(db *mongo.Database, collectionStr string, filter interface{}, model interface{}) error {
	ret := _m.Called(db, collectionStr, filter, model)

	if len(ret) == 0 {
		panic("no return value specified for FindOne")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(*mongo.Database, string, interface{}, interface{}) error); ok {
		r0 = rf(db, collectionStr, filter, model)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// IMongo_FindOne_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'FindOne'
type IMongo_FindOne_Call struct {
	*mock.Call
}

// FindOne is a helper method to define mock.On call
//   - db *mongo.Database
//   - collectionStr string
//   - filter interface{}
//   - model interface{}
func (_e *IMongo_Expecter) FindOne(db interface{}, collectionStr interface{}, filter interface{}, model interface{}) *IMongo_FindOne_Call {
	return &IMongo_FindOne_Call{Call: _e.mock.On("FindOne", db, collectionStr, filter, model)}
}

func (_c *IMongo_FindOne_Call) Run(run func(db *mongo.Database, collectionStr string, filter interface{}, model interface{})) *IMongo_FindOne_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*mongo.Database), args[1].(string), args[2].(interface{}), args[3].(interface{}))
	})
	return _c
}

func (_c *IMongo_FindOne_Call) Return(_a0 error) *IMongo_FindOne_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *IMongo_FindOne_Call) RunAndReturn(run func(*mongo.Database, string, interface{}, interface{}) error) *IMongo_FindOne_Call {
	_c.Call.Return(run)
	return _c
}

// Insert provides a mock function with given fields: db, collectionStr, values
func (_m *IMongo) Insert(db *mongo.Database, collectionStr string, values interface{}) error {
	ret := _m.Called(db, collectionStr, values)

	if len(ret) == 0 {
		panic("no return value specified for Insert")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(*mongo.Database, string, interface{}) error); ok {
		r0 = rf(db, collectionStr, values)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// IMongo_Insert_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Insert'
type IMongo_Insert_Call struct {
	*mock.Call
}

// Insert is a helper method to define mock.On call
//   - db *mongo.Database
//   - collectionStr string
//   - values interface{}
func (_e *IMongo_Expecter) Insert(db interface{}, collectionStr interface{}, values interface{}) *IMongo_Insert_Call {
	return &IMongo_Insert_Call{Call: _e.mock.On("Insert", db, collectionStr, values)}
}

func (_c *IMongo_Insert_Call) Run(run func(db *mongo.Database, collectionStr string, values interface{})) *IMongo_Insert_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*mongo.Database), args[1].(string), args[2].(interface{}))
	})
	return _c
}

func (_c *IMongo_Insert_Call) Return(_a0 error) *IMongo_Insert_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *IMongo_Insert_Call) RunAndReturn(run func(*mongo.Database, string, interface{}) error) *IMongo_Insert_Call {
	_c.Call.Return(run)
	return _c
}

// NewIMongo creates a new instance of IMongo. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewIMongo(t interface {
	mock.TestingT
	Cleanup(func())
}) *IMongo {
	mock := &IMongo{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
