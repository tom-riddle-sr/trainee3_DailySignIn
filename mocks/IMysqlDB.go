// Code generated by mockery v2.43.2. DO NOT EDIT.

package mocks

import (
	mysql "trainee3/database/mysql"

	mock "github.com/stretchr/testify/mock"
	gorm "gorm.io/gorm"
)

// IMysqlDB is an autogenerated mock type for the IMysqlDB type
type IMysqlDB struct {
	mock.Mock
}

type IMysqlDB_Expecter struct {
	mock *mock.Mock
}

func (_m *IMysqlDB) EXPECT() *IMysqlDB_Expecter {
	return &IMysqlDB_Expecter{mock: &_m.Mock}
}

// GetDB provides a mock function with given fields: dbName
func (_m *IMysqlDB) GetDB(dbName mysql.DBName) *gorm.DB {
	ret := _m.Called(dbName)

	if len(ret) == 0 {
		panic("no return value specified for GetDB")
	}

	var r0 *gorm.DB
	if rf, ok := ret.Get(0).(func(mysql.DBName) *gorm.DB); ok {
		r0 = rf(dbName)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*gorm.DB)
		}
	}

	return r0
}

// IMysqlDB_GetDB_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetDB'
type IMysqlDB_GetDB_Call struct {
	*mock.Call
}

// GetDB is a helper method to define mock.On call
//   - dbName mysql.DBName
func (_e *IMysqlDB_Expecter) GetDB(dbName interface{}) *IMysqlDB_GetDB_Call {
	return &IMysqlDB_GetDB_Call{Call: _e.mock.On("GetDB", dbName)}
}

func (_c *IMysqlDB_GetDB_Call) Run(run func(dbName mysql.DBName)) *IMysqlDB_GetDB_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(mysql.DBName))
	})
	return _c
}

func (_c *IMysqlDB_GetDB_Call) Return(_a0 *gorm.DB) *IMysqlDB_GetDB_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *IMysqlDB_GetDB_Call) RunAndReturn(run func(mysql.DBName) *gorm.DB) *IMysqlDB_GetDB_Call {
	_c.Call.Return(run)
	return _c
}

// NewIMysqlDB creates a new instance of IMysqlDB. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewIMysqlDB(t interface {
	mock.TestingT
	Cleanup(func())
}) *IMysqlDB {
	mock := &IMysqlDB{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
