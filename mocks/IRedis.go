// Code generated by mockery v2.43.2. DO NOT EDIT.

package mocks

import (
	redis "github.com/redis/go-redis/v9"
	mock "github.com/stretchr/testify/mock"
)

// IRedis is an autogenerated mock type for the IRedis type
type IRedis struct {
	mock.Mock
}

type IRedis_Expecter struct {
	mock *mock.Mock
}

func (_m *IRedis) EXPECT() *IRedis_Expecter {
	return &IRedis_Expecter{mock: &_m.Mock}
}

// Get provides a mock function with given fields: c, key, model
func (_m *IRedis) Get(c *redis.Client, key string, model interface{}) error {
	ret := _m.Called(c, key, model)

	if len(ret) == 0 {
		panic("no return value specified for Get")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(*redis.Client, string, interface{}) error); ok {
		r0 = rf(c, key, model)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// IRedis_Get_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Get'
type IRedis_Get_Call struct {
	*mock.Call
}

// Get is a helper method to define mock.On call
//   - c *redis.Client
//   - key string
//   - model interface{}
func (_e *IRedis_Expecter) Get(c interface{}, key interface{}, model interface{}) *IRedis_Get_Call {
	return &IRedis_Get_Call{Call: _e.mock.On("Get", c, key, model)}
}

func (_c *IRedis_Get_Call) Run(run func(c *redis.Client, key string, model interface{})) *IRedis_Get_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*redis.Client), args[1].(string), args[2].(interface{}))
	})
	return _c
}

func (_c *IRedis_Get_Call) Return(_a0 error) *IRedis_Get_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *IRedis_Get_Call) RunAndReturn(run func(*redis.Client, string, interface{}) error) *IRedis_Get_Call {
	_c.Call.Return(run)
	return _c
}

// Set provides a mock function with given fields: c, key, value, expirationTime
func (_m *IRedis) Set(c *redis.Client, key string, value interface{}, expirationTime int32) error {
	ret := _m.Called(c, key, value, expirationTime)

	if len(ret) == 0 {
		panic("no return value specified for Set")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(*redis.Client, string, interface{}, int32) error); ok {
		r0 = rf(c, key, value, expirationTime)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// IRedis_Set_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Set'
type IRedis_Set_Call struct {
	*mock.Call
}

// Set is a helper method to define mock.On call
//   - c *redis.Client
//   - key string
//   - value interface{}
//   - expirationTime int32
func (_e *IRedis_Expecter) Set(c interface{}, key interface{}, value interface{}, expirationTime interface{}) *IRedis_Set_Call {
	return &IRedis_Set_Call{Call: _e.mock.On("Set", c, key, value, expirationTime)}
}

func (_c *IRedis_Set_Call) Run(run func(c *redis.Client, key string, value interface{}, expirationTime int32)) *IRedis_Set_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*redis.Client), args[1].(string), args[2].(interface{}), args[3].(int32))
	})
	return _c
}

func (_c *IRedis_Set_Call) Return(_a0 error) *IRedis_Set_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *IRedis_Set_Call) RunAndReturn(run func(*redis.Client, string, interface{}, int32) error) *IRedis_Set_Call {
	_c.Call.Return(run)
	return _c
}

// NewIRedis creates a new instance of IRedis. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewIRedis(t interface {
	mock.TestingT
	Cleanup(func())
}) *IRedis {
	mock := &IRedis{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
